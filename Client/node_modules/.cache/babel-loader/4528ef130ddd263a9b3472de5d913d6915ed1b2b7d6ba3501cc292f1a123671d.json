{"ast":null,"code":"var _jsxFileName = \"G:\\\\MYL software company\\\\Full-FrontEnd_and BackEnd-Project\\\\Job-Portal-Project\\\\Client\\\\src\\\\components\\\\Pages\\\\JobPage\\\\ManageJob.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"react-bootstrap\";\nimport ConfirmDeleteModal from \"./ConfirmDeleteModal\";\n// import SelfCloseModalAlert from \"./SelfCloseModalAlert\";\nimport SelfClosingAlert from \"./SelfClosingAlert\";\nimport { Pagination } from \"react-bootstrap\";\nimport JobModal from \"./JobComponent/JobModal\";\n// const API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:2000/\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ManageJob() {\n  _s();\n  const [showModal, setShow] = useState(false);\n  const [modalType, setModalType] = useState(\"create\");\n  const [SlectedJob, setSelectedJob] = useState({});\n  const [SlectedJob_ID, setSlectedJob_ID] = useState({});\n  const [jobsData, SetJobs] = useState([]);\n  // const [values, setValues] = useState({\n  //   Company: \"\",\n  //   Description: \"\",\n  //   Jtitle: \"\",\n  //   Location: \"\",\n  //   Salary: \"\",\n  // });\n  // const [errors, setErrors] = useState({});\n  // const [message, setMessage] = useState(\"\");\n  // const [err, setError] = useState(false);\n\n  useEffect(() => {\n    const api = \"http://localhost:2000/\";\n    fetch(api).then(response => response.json()).then(data => {\n      const jobsData = data.Jobs || [];\n      SetJobs(jobsData);\n    }).catch(e => {\n      console.error(e.message);\n    });\n  }, [jobsData]);\n  // pagination\n  var rowsPerPage = 2;\n  const [currentPage, setCurrentPage] = useState(1);\n  const totalPages = Math.ceil(jobsData.length / rowsPerPage);\n\n  // Calculate the data for the current page\n  const startIndex = (currentPage - 1) * rowsPerPage;\n  const currentData = jobsData.slice(startIndex, startIndex + rowsPerPage);\n\n  // Function to change the page\n  const changePage = newPage => {\n    if (newPage > 0 && newPage <= totalPages) {\n      setCurrentPage(newPage);\n    }\n  };\n  const renderPaginationItems = () => {\n    const items = [];\n    const maxVisiblePages = 2; // Number of pages to show near the current page\n\n    for (let page = 1; page <= totalPages; page++) {\n      if (page === 1 ||\n      // First page\n      page === totalPages ||\n      // Last page\n      page >= currentPage - maxVisiblePages && page <= currentPage + maxVisiblePages // Pages near the current page\n      ) {\n        items.push(/*#__PURE__*/_jsxDEV(Pagination.Item, {\n          active: page === currentPage,\n          onClick: () => changePage(page),\n          children: page\n        }, page, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this));\n      } else if (page === currentPage - maxVisiblePages - 1 ||\n      // Before the range of current page\n      page === currentPage + maxVisiblePages + 1 // After the range of current page\n      ) {\n        items.push(/*#__PURE__*/_jsxDEV(Pagination.Ellipsis, {\n          disabled: true\n        }, page, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 24\n        }, this));\n      }\n    }\n    return items;\n  };\n  //end of pagination\n  const handleClose = () => {\n    setSelectedJob({});\n    // setValues({\n    //   Company: \"\",\n    //   Description: \"\",\n    //   Jtitle: \"\",\n    //   Location: \"\",\n    //   Salary: \"\",\n    // });\n    setShow(false);\n  };\n  const ShowPostModal = () => {\n    setShow(true);\n    setModalType(\"create\");\n    // setValues({\n    //   Company: \"\",\n    //   Description: \"\",\n    //   Jtitle: \"\",\n    //   Location: \"\",\n    //   Salary: \"\",\n    // });\n  };\n  const ShowUpdateModal = (item, id) => {\n    setShow(true);\n    setModalType(\"update\");\n    setSelectedJob({\n      Company: item.COMPANY,\n      Description: item.DESCRIPTION,\n      Jtitle: item.JOB_TITLE,\n      Location: item.LOCATION,\n      Salary: item.SALARY\n    });\n    set;\n    // setValues({\n    //   Company: item.COMPANY,\n    //   Description: item.DESCRIPTION,\n    //   Jtitle: item.JOB_TITLE,\n    //   Location: item.LOCATION,\n    //   Salary: item.SALARY,\n    // });\n  };\n\n  // const handleChange = (e) => {\n  //   setValues({ ...values, [e.target.name]: e.target.value });\n  // };\n\n  // const validate = () => {\n  //   let errors = {};\n  //   if (!values.Company.trim()) errors.Company = \"Company name is required.\";\n  //   if (!values.Description.trim())\n  //     errors.Description = \"Description is required.\";\n  //   if (!values.Jtitle.trim()) errors.Jtitle = \"Job title is required.\";\n  //   if (!values.Location.trim()) errors.Location = \"Location is required.\";\n  //   if (!values.Salary || isNaN(values.Salary) || values.Salary <= 0)\n  //     errors.Salary = \"Salary must be a positive number.\";\n  //   return errors;\n  // };\n\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n  //   const validationErrors = validate();\n  //   setErrors(validationErrors);\n\n  //   if (Object.keys(validationErrors).length === 0) {\n  //     try {\n  //       const url = modalType === \"create\" ? `${API_BASE_URL}ManageJobs/PostJob` : `${API_BASE_URL}ManageJobs/UpdateJob/${selectedJob.JOB_ID}`;\n\n  //       const method = modalType === \"create\" ? \"POST\" : \"PUT\"; // Assuming you have a PUT endpoint for updates\n  //       const response = await fetch(url, {\n  //         method: method,\n  //         headers: { \"Content-Type\": \"application/json\" },\n  //         body: JSON.stringify(values),\n  //       });\n\n  //       const data = await response.json();\n  //       if (response.ok) {\n  //         setMessage(\n  //           modalType === \"create\"\n  //             ? \"Job posted successfully!\"\n  //             : \"Job updated successfully!\"             \n  //         );\n\n  //         setError(false);\n  //         // Refresh the job list or update state\n  //         if (modalType === \"create\") {\n  //           SetJobs((prevJobs) => [...prevJobs, data.job]); // Assuming your API returns the created job\n  //         } else {\n  //           SetJobs((prevJobs) =>\n  //             prevJobs.map((job) =>\n  //               job.JOB_ID === selectedJob.JOB_ID ? values : job\n  //             )\n  //           );\n  //         }\n  //       } else {\n  //         setMessage(data.message || \"An error occurred.\");\n  //         setError(true);\n  //       }\n  //     } catch (err) {\n  //       setMessage(\"An unexpected error occurred.\");\n  //       setError(true);\n  //       console.error(err);\n  //     }\n  //   } else {\n  //     setMessage(\"Please fix the errors and submit again.\");\n  //     setError(true);\n  //   }\n  // };\n\n  //for delete modal\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [jobIdToDelete, setJobIdToDelete] = useState(null);\n  const [DeletMessage, setDeletMessage] = useState(null);\n  const handlDeleteClick = jobid => {\n    setIsModalOpen(true); // // Open the confirmation modal\n    setJobIdToDelete(jobid);\n    //const isConfirmed = confirm(\"Are you sure you want to delete this job?\");\n  };\n  const handleCancelDelete = () => {\n    setIsModalOpen(false); // Close the modal without deleting\n  };\n\n  //self closing modal logic\n  const [SelfModalOpen, setSelfModalOpen] = useState(false);\n  // const [SelfModalClose, setSelfModalClose] = useState(false);\n\n  const handleSelfClose = () => setSelfModalOpen(false);\n  //\n  const handleConfirmDelete = async () => {\n    setIsModalOpen(false);\n    try {\n      const response = await fetch(`http://localhost:2000/ManageJobs/DeleteJob/${jobIdToDelete}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setDeletMessage(\"Job deleted successfully:\", data);\n        setSelfModalOpen(true);\n        // SetJobs(data)\n      } else {\n        setDeletMessage(\"Failed to delete the job:\", response.statusText);\n      }\n    } catch (error) {\n      setDeletMessage(\"Error during deletion:\", error);\n    }\n  };\n\n  // // Usage example\n  // deleteJob(1); // Pass the job ID you want to delete\n\n  if (jobsData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid pt-5 \",\n      style: {\n        marginTop: \"100px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-container bg-light clearfix container\",\n        children: [/*#__PURE__*/_jsxDEV(SelfClosingAlert, {\n          show: SelfModalOpen,\n          onClose: handleSelfClose,\n          message: DeletMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            float: \"right\"\n          },\n          className: \"btn btn-success\",\n          onClick: ShowPostModal,\n          children: \"Add new Job\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(JobModal, {\n          modalType: modalType,\n          showModal: showModal,\n          handleClose: handleClose,\n          SlectedJob: SlectedJob,\n          id: SlectedJob.JOB_ID\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container shadow bg-light container \",\n        children: [/*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-striped table-hover\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            style: {\n              backgroundColor: \"lightgray\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"No\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Job ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Job Title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Company\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Location\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Salary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Action\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            className: \"table-group-divider\",\n            children: currentData && currentData.length > 0 ? currentData.map((item, index) => item ? /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: (currentPage - 1) * rowsPerPage + index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.JOB_ID\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.JOB_TITLE\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 404,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.COMPANY\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.LOCATION\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.SALARY\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.DESCRIPTION\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  display: \"Flex\",\n                  columnGap: \"10px\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(Link, {\n                  className: \"btn btn-success\",\n                  children: \"View\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 410,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => ShowUpdateModal(item, item.JOB_ID),\n                  className: \"btn btn-warning\",\n                  children: \"Update\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 411,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Link, {\n                  onClick: () => handlDeleteClick(item.JOB_ID),\n                  className: \"btn btn-danger\",\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 417,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 23\n              }, this)]\n            }, item.JOB_ID, true, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 21\n            }, this) : null) : /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"8\",\n                className: \"text-center\",\n                children: \"No jobs available.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 429,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n          className: \"justify-content-center\",\n          size: \"lg\",\n          children: [/*#__PURE__*/_jsxDEV(Pagination.First, {\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Pagination.Prev, {\n            onClick: () => changePage(currentPage - 1),\n            disabled: currentPage === 1,\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 13\n          }, this), renderPaginationItems(), /*#__PURE__*/_jsxDEV(Pagination.Next, {\n            onClick: () => changePage(currentPage + 1),\n            disabled: currentPage === totalPages,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Pagination.Last, {\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ConfirmDeleteModal, {\n          isOpen: isModalOpen,\n          onConfirm: handleConfirmDelete,\n          onCancel: handleCancelDelete,\n          message: DeletMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container-fluid bg-light\",\n      style: {\n        marginTop: \"100px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-5 mb-4 bg-light rounded-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container-fluid py-5 text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            style: {\n              color: \"red\"\n            },\n            children: \"There is no jobs available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(ManageJob, \"aiwjO6Xlp+s02w3MZW5hw66GQrs=\");\n_c = ManageJob;\nexport default ManageJob;\nvar _c;\n$RefreshReg$(_c, \"ManageJob\");","map":{"version":3,"names":["React","useState","useEffect","Link","Button","ConfirmDeleteModal","SelfClosingAlert","Pagination","JobModal","jsxDEV","_jsxDEV","ManageJob","_s","showModal","setShow","modalType","setModalType","SlectedJob","setSelectedJob","SlectedJob_ID","setSlectedJob_ID","jobsData","SetJobs","api","fetch","then","response","json","data","Jobs","catch","e","console","error","message","rowsPerPage","currentPage","setCurrentPage","totalPages","Math","ceil","length","startIndex","currentData","slice","changePage","newPage","renderPaginationItems","items","maxVisiblePages","page","push","Item","active","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","Ellipsis","disabled","handleClose","ShowPostModal","ShowUpdateModal","item","id","Company","COMPANY","Description","DESCRIPTION","Jtitle","JOB_TITLE","Location","LOCATION","Salary","SALARY","set","isModalOpen","setIsModalOpen","jobIdToDelete","setJobIdToDelete","DeletMessage","setDeletMessage","handlDeleteClick","jobid","handleCancelDelete","SelfModalOpen","setSelfModalOpen","handleSelfClose","handleConfirmDelete","method","headers","ok","statusText","className","style","marginTop","show","onClose","float","JOB_ID","backgroundColor","scope","map","index","display","columnGap","colSpan","size","First","Prev","Next","Last","isOpen","onConfirm","onCancel","color","_c","$RefreshReg$"],"sources":["G:/MYL software company/Full-FrontEnd_and BackEnd-Project/Job-Portal-Project/Client/src/components/Pages/JobPage/ManageJob.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport ConfirmDeleteModal from \"./ConfirmDeleteModal\";\r\n// import SelfCloseModalAlert from \"./SelfCloseModalAlert\";\r\nimport SelfClosingAlert from \"./SelfClosingAlert\";\r\nimport { Pagination } from \"react-bootstrap\";\r\nimport JobModal from \"./JobComponent/JobModal\";\r\n// const API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:2000/\";\r\n\r\nfunction ManageJob() {\r\n  const [showModal, setShow] = useState(false);\r\n  const [modalType, setModalType] = useState(\"create\");\r\n  const [SlectedJob, setSelectedJob] = useState({});\r\n  const [SlectedJob_ID, setSlectedJob_ID] = useState({});\r\n  const [jobsData, SetJobs] = useState([]);\r\n  // const [values, setValues] = useState({\r\n  //   Company: \"\",\r\n  //   Description: \"\",\r\n  //   Jtitle: \"\",\r\n  //   Location: \"\",\r\n  //   Salary: \"\",\r\n  // });\r\n  // const [errors, setErrors] = useState({});\r\n  // const [message, setMessage] = useState(\"\");\r\n  // const [err, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const api = \"http://localhost:2000/\";\r\n    fetch(api)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const jobsData = data.Jobs || [];\r\n        SetJobs(jobsData);\r\n      })\r\n      .catch((e) => {\r\n        console.error(e.message);\r\n      });\r\n  }, [jobsData]);\r\n  // pagination\r\n  var rowsPerPage = 2;\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const totalPages = Math.ceil(jobsData.length / rowsPerPage);\r\n\r\n  // Calculate the data for the current page\r\n  const startIndex = (currentPage - 1) * rowsPerPage;\r\n  const currentData = jobsData.slice(startIndex, startIndex + rowsPerPage);\r\n\r\n  // Function to change the page\r\n  const changePage = (newPage) => {\r\n    if (newPage > 0 && newPage <= totalPages) {\r\n      setCurrentPage(newPage);\r\n    }\r\n  };\r\n  const renderPaginationItems = () => {\r\n    const items = [];\r\n    const maxVisiblePages = 2; // Number of pages to show near the current page\r\n\r\n    for (let page = 1; page <= totalPages; page++) {\r\n        if (\r\n            page === 1 || // First page\r\n            page === totalPages || // Last page\r\n            (page >= currentPage - maxVisiblePages && page <= currentPage + maxVisiblePages) // Pages near the current page\r\n        ) {\r\n            items.push(\r\n                <Pagination.Item\r\n                  \r\n                    key={page}\r\n                    active={page === currentPage}\r\n                    onClick={() => changePage(page)}\r\n                >\r\n                    {page}\r\n                </Pagination.Item>\r\n            );\r\n        } else if (\r\n            page === currentPage - maxVisiblePages - 1 || // Before the range of current page\r\n            page === currentPage + maxVisiblePages + 1 // After the range of current page\r\n        ) {\r\n            items.push(<Pagination.Ellipsis key={page} disabled />);\r\n        }\r\n    }\r\n\r\n    return items;\r\n};\r\n  //end of pagination\r\n  const handleClose = () => {\r\n    setSelectedJob({});\r\n    // setValues({\r\n    //   Company: \"\",\r\n    //   Description: \"\",\r\n    //   Jtitle: \"\",\r\n    //   Location: \"\",\r\n    //   Salary: \"\",\r\n    // });\r\n    setShow(false);\r\n  };\r\n\r\n  const ShowPostModal = () => {\r\n    setShow(true);\r\n    setModalType(\"create\");\r\n    // setValues({\r\n    //   Company: \"\",\r\n    //   Description: \"\",\r\n    //   Jtitle: \"\",\r\n    //   Location: \"\",\r\n    //   Salary: \"\",\r\n    // });\r\n  };\r\n\r\n  const ShowUpdateModal = (item,id) => {\r\n    setShow(true);\r\n    setModalType(\"update\");\r\n    setSelectedJob({\r\n      Company: item.COMPANY,\r\n      Description: item.DESCRIPTION,\r\n      Jtitle: item.JOB_TITLE,\r\n      Location: item.LOCATION,\r\n      Salary: item.SALARY,\r\n    });\r\nset\r\n    // setValues({\r\n    //   Company: item.COMPANY,\r\n    //   Description: item.DESCRIPTION,\r\n    //   Jtitle: item.JOB_TITLE,\r\n    //   Location: item.LOCATION,\r\n    //   Salary: item.SALARY,\r\n    // });\r\n  };\r\n\r\n  // const handleChange = (e) => {\r\n  //   setValues({ ...values, [e.target.name]: e.target.value });\r\n  // };\r\n\r\n  // const validate = () => {\r\n  //   let errors = {};\r\n  //   if (!values.Company.trim()) errors.Company = \"Company name is required.\";\r\n  //   if (!values.Description.trim())\r\n  //     errors.Description = \"Description is required.\";\r\n  //   if (!values.Jtitle.trim()) errors.Jtitle = \"Job title is required.\";\r\n  //   if (!values.Location.trim()) errors.Location = \"Location is required.\";\r\n  //   if (!values.Salary || isNaN(values.Salary) || values.Salary <= 0)\r\n  //     errors.Salary = \"Salary must be a positive number.\";\r\n  //   return errors;\r\n  // };\r\n\r\n  // const handleSubmit = async (e) => {\r\n  //   e.preventDefault();\r\n  //   const validationErrors = validate();\r\n  //   setErrors(validationErrors);\r\n\r\n  //   if (Object.keys(validationErrors).length === 0) {\r\n  //     try {\r\n  //       const url = modalType === \"create\" ? `${API_BASE_URL}ManageJobs/PostJob` : `${API_BASE_URL}ManageJobs/UpdateJob/${selectedJob.JOB_ID}`;\r\n\r\n  //       const method = modalType === \"create\" ? \"POST\" : \"PUT\"; // Assuming you have a PUT endpoint for updates\r\n  //       const response = await fetch(url, {\r\n  //         method: method,\r\n  //         headers: { \"Content-Type\": \"application/json\" },\r\n  //         body: JSON.stringify(values),\r\n  //       });\r\n\r\n  //       const data = await response.json();\r\n  //       if (response.ok) {\r\n  //         setMessage(\r\n  //           modalType === \"create\"\r\n  //             ? \"Job posted successfully!\"\r\n  //             : \"Job updated successfully!\"             \r\n  //         );\r\n          \r\n  //         setError(false);\r\n  //         // Refresh the job list or update state\r\n  //         if (modalType === \"create\") {\r\n  //           SetJobs((prevJobs) => [...prevJobs, data.job]); // Assuming your API returns the created job\r\n  //         } else {\r\n  //           SetJobs((prevJobs) =>\r\n  //             prevJobs.map((job) =>\r\n  //               job.JOB_ID === selectedJob.JOB_ID ? values : job\r\n  //             )\r\n  //           );\r\n  //         }\r\n  //       } else {\r\n  //         setMessage(data.message || \"An error occurred.\");\r\n  //         setError(true);\r\n  //       }\r\n  //     } catch (err) {\r\n  //       setMessage(\"An unexpected error occurred.\");\r\n  //       setError(true);\r\n  //       console.error(err);\r\n  //     }\r\n  //   } else {\r\n  //     setMessage(\"Please fix the errors and submit again.\");\r\n  //     setError(true);\r\n  //   }\r\n  // };\r\n\r\n  //for delete modal\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [jobIdToDelete, setJobIdToDelete] = useState(null);\r\n  const [DeletMessage, setDeletMessage] = useState(null);\r\n\r\n  const handlDeleteClick = (jobid) => {\r\n    setIsModalOpen(true); // // Open the confirmation modal\r\n    setJobIdToDelete(jobid);\r\n    //const isConfirmed = confirm(\"Are you sure you want to delete this job?\");\r\n  };\r\n  const handleCancelDelete = () => {\r\n    setIsModalOpen(false); // Close the modal without deleting\r\n  };\r\n\r\n  //self closing modal logic\r\n  const [SelfModalOpen, setSelfModalOpen] = useState(false);\r\n  // const [SelfModalClose, setSelfModalClose] = useState(false);\r\n\r\n  const handleSelfClose = () => setSelfModalOpen(false);\r\n  //\r\n  const handleConfirmDelete = async () => {\r\n    setIsModalOpen(false);\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:2000/ManageJobs/DeleteJob/${jobIdToDelete}`,\r\n        {\r\n          method: \"DELETE\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setDeletMessage(\"Job deleted successfully:\", data);\r\n        setSelfModalOpen(true);\r\n        // SetJobs(data)\r\n      } else {\r\n        setDeletMessage(\"Failed to delete the job:\", response.statusText);\r\n      }\r\n    } catch (error) {\r\n      setDeletMessage(\"Error during deletion:\", error);\r\n    }\r\n  };\r\n\r\n  // // Usage example\r\n  // deleteJob(1); // Pass the job ID you want to delete\r\n\r\n  if (jobsData) {\r\n    return (\r\n      <div className=\"container-fluid pt-5 \" style={{ marginTop: \"100px\" }}>\r\n        <div className=\"modal-container bg-light clearfix container\">\r\n          <SelfClosingAlert\r\n            show={SelfModalOpen}\r\n            onClose={handleSelfClose}\r\n            message={DeletMessage}\r\n          />\r\n          <Button\r\n            style={{ float: \"right\" }}\r\n            className=\"btn btn-success\"\r\n            onClick={ShowPostModal}\r\n          >\r\n            Add new Job\r\n          </Button>\r\n        <JobModal\r\n      \r\n          modalType= {modalType}\r\n          showModal={showModal}\r\n        \r\n          handleClose={handleClose}\r\n          SlectedJob={SlectedJob}\r\n          id={SlectedJob.JOB_ID}\r\n         \r\n        />\r\n\r\n          {/* <Modal className=\"modal-top\" show={showModal} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>\r\n                {modalType === \"create\" ? \"Post a Job\" : \"Update Job\"}\r\n                {selectedJob.JOB_ID}\r\n              </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <form onSubmit={handleSubmit}>\r\n                <div>\r\n                  <label>\r\n                    Company\r\n                    <span\r\n                      style={{\r\n                        color: \"red\",\r\n                        fontSize: \"30px\",\r\n                        marginLeft: \"1px\",\r\n                      }}\r\n                    >\r\n                      *\r\n                    </span>\r\n                    :\r\n                  </label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    name=\"Company\"\r\n                    value={values.Company}\r\n                    onChange={handleChange}\r\n                  />\r\n                  {errors.Company && (\r\n                    <p style={{ color: \"red\" }}>{errors.Company}</p>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  <label>Description:</label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    name=\"Description\"\r\n                    onChange={handleChange}\r\n                    value={values.Description}\r\n                  />\r\n                  {errors.Description && (\r\n                    <p style={{ color: \"red\" }}>{errors.Description}</p>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  <label>Job Title:</label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    name=\"Jtitle\"\r\n                    onChange={handleChange}\r\n                    value={values.Jtitle}\r\n                  />\r\n                  {errors.Jtitle && (\r\n                    <p style={{ color: \"red\" }}>{errors.Jtitle}</p>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  <label>Location:</label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    name=\"Location\"\r\n                    onChange={handleChange}\r\n                    value={values.Location}\r\n                  />\r\n                  {errors.Location && (\r\n                    <p style={{ color: \"red\" }}>{errors.Location}</p>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  <label>Salary:</label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"number\"\r\n                    name=\"Salary\"\r\n                    onChange={handleChange}\r\n                    value={values.Salary}\r\n                  />\r\n                  {errors.Salary && (\r\n                    <p style={{ color: \"red\" }}>{errors.Salary}</p>\r\n                  )}\r\n                </div>\r\n                <div className=\"mt-4\">\r\n                  <input\r\n                    className=\"btn btn-primary form-control btn-lg\"\r\n                    type=\"submit\"\r\n                    value={modalType === \"create\" ? \"Register\" : \"Save Update\"}\r\n                  />\r\n                </div>\r\n              </form>\r\n              {message && (\r\n                <p style={{ color: err ? \"red\" : \"green\" }}>{message}</p>\r\n              )}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button\r\n                className=\"btn btn-danger btn-lg\"\r\n                variant=\"secondary\"\r\n                onClick={handleClose}\r\n              >\r\n                Close\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal> */}\r\n        </div>\r\n\r\n        <div className=\"table-container shadow bg-light container \">\r\n          <table className=\"table table-striped table-hover\">\r\n            <thead style={{backgroundColor:\"lightgray\"}}>\r\n              <tr>\r\n                <th scope=\"col\">No</th>\r\n                <th scope=\"col\">Job ID</th>\r\n                <th scope=\"col\">Job Title</th>\r\n                <th scope=\"col\">Company</th>\r\n                <th scope=\"col\">Location</th>\r\n                <th scope=\"col\">Salary</th>\r\n                <th scope=\"col\">Description</th>\r\n                <th scope=\"col\">Action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"table-group-divider\">\r\n              {currentData && currentData.length > 0 ? (\r\n                currentData.map((item, index) =>\r\n                  item ? (\r\n                    <tr key={item.JOB_ID}>\r\n                      <td>{(currentPage - 1) * rowsPerPage + index + 1}</td>\r\n                      <td>{item.JOB_ID}</td>\r\n                      <td>{item.JOB_TITLE}</td>\r\n                      <td>{item.COMPANY}</td>\r\n                      <td>{item.LOCATION}</td>\r\n                      <td>{item.SALARY}</td>\r\n                      <td>{item.DESCRIPTION}</td>\r\n                      <td style={{ display: \"Flex\", columnGap: \"10px\" }}>\r\n                        <Link className=\"btn btn-success\">View</Link>\r\n                        <button\r\n                          onClick={() => ShowUpdateModal(item,item.JOB_ID)}\r\n                          className=\"btn btn-warning\"\r\n                        >\r\n                          Update\r\n                        </button>\r\n                        <Link\r\n                          onClick={() => handlDeleteClick(item.JOB_ID)}\r\n                          className=\"btn btn-danger\"\r\n                        >\r\n                          Delete\r\n                        </Link>\r\n                      </td>\r\n                    </tr>\r\n                  ) : null\r\n                )\r\n              ) : (\r\n                <tr>\r\n                  <td colSpan=\"8\" className=\"text-center\">\r\n                    No jobs available.\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n\r\n          <Pagination className=\"justify-content-center\"  size=\"lg\">\r\n          <Pagination.First disabled={true} />\r\n            <Pagination.Prev\r\n                onClick={() => changePage(currentPage - 1)}\r\n                disabled={currentPage === 1}\r\n            >\r\n                Previous\r\n            </Pagination.Prev>\r\n\r\n            {renderPaginationItems()}\r\n\r\n            <Pagination.Next\r\n                onClick={() => changePage(currentPage + 1)}\r\n                disabled={currentPage === totalPages}\r\n            >\r\n                Next\r\n            </Pagination.Next>\r\n            <Pagination.Last disabled={true} />\r\n        </Pagination>\r\n          <ConfirmDeleteModal \r\n            isOpen={isModalOpen}\r\n            onConfirm={handleConfirmDelete}\r\n            onCancel={handleCancelDelete}\r\n            message={DeletMessage}\r\n          />\r\n\r\n          {/* <SelfCloseModalAlert\r\n            showModal={SelfModalOpen}\r\n            onClose={handleSelfClose}\r\n          \r\n          \r\n          /> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <section\r\n        className=\"container-fluid bg-light\"\r\n        style={{ marginTop: \"100px\" }}\r\n      >\r\n        <div className=\"p-5 mb-4 bg-light rounded-3\">\r\n          <div className=\"container-fluid py-5 text-center\">\r\n            <h1 style={{ color: \"red\" }}>There is no jobs available</h1>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ManageJob;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}