{"ast":null,"code":"import React, { useState } from 'react';\nimport { Modal, Button } from \"react-bootstrap\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:2000/\";\n\n// const JobModal = ({modalType,showModal,handleClose,values}) => {\n//     // const [showModal, setShow] = useState(false);\n//     // const [modalType, setModalType] = useState(\"create\");\n//     // const [selectedJob, setSelectedJob] = useState({});\n//     // const [jobsData, SetJobs] = useState([]);\n//     const [values, setValues] = useState({\n//       Company: \"\",\n//       Description: \"\",\n//       Jtitle: \"\",\n//       Location: \"\",\n//       Salary: \"\",\n//     });\n//     const [errors, setErrors] = useState({});\n//     const [message, setMessage] = useState(\"\");\n//     const [err, setError] = useState(false);\n\n//       const handleChange = (e) => {\n//         setValues({ ...values, [e.target.name]: e.target.value });\n//       };\n//       const validate = () => {\n//         let errors = {};\n//         if (!values.Company.trim()) errors.Company = \"Company name is required.\";\n//         if (!values.Description.trim())\n//           errors.Description = \"Description is required.\";\n//         if (!values.Jtitle.trim()) errors.Jtitle = \"Job title is required.\";\n//         if (!values.Location.trim()) errors.Location = \"Location is required.\";\n//         if (!values.Salary || isNaN(values.Salary) || values.Salary <= 0)\n//           errors.Salary = \"Salary must be a positive number.\";\n//         return errors;\n//       };\n//       const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         const validationErrors = validate();\n//         setErrors(validationErrors);\n\n//         if (Object.keys(validationErrors).length === 0) {\n//           try {\n//             const url = modalType === \"create\" ? `${API_BASE_URL}ManageJobs/PostJob` : `${API_BASE_URL}ManageJobs/UpdateJob/${selectedJob.JOB_ID}`;\n\n//             const method = modalType === \"create\" ? \"POST\" : \"PUT\"; // Assuming you have a PUT endpoint for updates\n//             const response = await fetch(url, {\n//               method: method,\n//               headers: { \"Content-Type\": \"application/json\" },\n//               body: JSON.stringify(values),\n//             });\n\n//             const data = await response.json();\n//             if (response.ok) {\n//               setMessage(\n//                 modalType === \"create\"\n//                   ? \"Job posted successfully!\"\n//                   : \"Job updated successfully!\"             \n//               );\n\n//               setError(false);\n//               // Refresh the job list or update state\n//               if (modalType === \"create\") {\n//                 SetJobs((prevJobs) => [...prevJobs, data.job]); // Assuming your API returns the created job\n//               } else {\n//                 SetJobs((prevJobs) =>\n//                   prevJobs.map((job) =>\n//                     job.JOB_ID === selectedJob.JOB_ID ? values : job\n//                   )\n//                 );\n//               }\n//             } else {\n//               setMessage(data.message || \"An error occurred.\");\n//               setError(true);\n//             }\n//           } catch (err) {\n//             setMessage(\"An unexpected error occurred.\");\n//             setError(true);\n//             console.error(err);\n//           }\n//         } else {\n//           setMessage(\"Please fix the errors and submit again.\");\n//           setError(true);\n//         }\n//       };\n\n//     //   const handleClose = () => {\n//     //     setSelectedJob({});\n//     //     setValues({\n//     //       Company: \"\",\n//     //       Description: \"\",\n//     //       Jtitle: \"\",\n//     //       Location: \"\",\n//     //       Salary: \"\",\n//     //     });\n//     //     setShow(false);\n//     //   };\n\n//     //   const ShowPostModal = () => {\n//     //     setShow(true);\n//     //     setModalType(\"create\");\n//     //     setValues({\n//     //       Company: \"\",\n//     //       Description: \"\",\n//     //       Jtitle: \"\",\n//     //       Location: \"\",\n//     //       Salary: \"\",\n//     //     });\n//     //   };\n\n//     //   const ShowUpdateModal = (item) => {\n//     //     setShow(true);\n//     //     setModalType(\"update\");\n//     //     setSelectedJob(item);\n//     //     setValues({\n//     //       Company: item.COMPANY,\n//     //       Description: item.DESCRIPTION,\n//     //       Jtitle: item.JOB_TITLE,\n//     //       Location: item.LOCATION,\n//     //       Salary: item.SALARY,\n//     //     });\n//     //   };\n\n//   return (\n//     <Modal className=\"modal-top\" show={showModal} onHide={handleClose}>\n//     <Modal.Header closeButton>\n//       <Modal.Title>\n//       {modalType === \"create\" ? \"Post a Job\" : \"Update Job\"}\n//       </Modal.Title>\n//     </Modal.Header>\n//     <Modal.Body>\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label>\n//             Company\n//             <span\n//               style={{\n//                 color: \"red\",\n//                 fontSize: \"30px\",\n//                 marginLeft: \"1px\",\n//               }}\n//             >\n//               *\n//             </span>\n//             :\n//           </label>\n//           <input\n//             className=\"form-control\"\n//             type=\"text\"\n//             name=\"Company\"\n//             value={values.Company}\n//             onChange={handleChange}\n//           />\n//           {errors.Company && (\n//             <p style={{ color: \"red\" }}>{errors.Company}</p>\n//           )}\n//         </div>\n//         <div>\n//           <label>Description:</label>\n//           <input\n//             className=\"form-control\"\n//             type=\"text\"\n//             name=\"Description\"\n//             onChange={handleChange}\n//             value={values.Description}\n//           />\n//           {errors.Description && (\n//             <p style={{ color: \"red\" }}>{errors.Description}</p>\n//           )}\n//         </div>\n//         <div>\n//           <label>Job Title:</label>\n//           <input\n//             className=\"form-control\"\n//             type=\"text\"\n//             name=\"Jtitle\"\n//             onChange={handleChange}\n//             value={values.Jtitle}\n//           />\n//           {errors.Jtitle && (\n//             <p style={{ color: \"red\" }}>{errors.Jtitle}</p>\n//           )}\n//         </div>\n//         <div>\n//           <label>Location:</label>\n//           <input\n//             className=\"form-control\"\n//             type=\"text\"\n//             name=\"Location\"\n//             onChange={handleChange}\n//             value={values.Location}\n//           />\n//           {errors.Location && (\n//             <p style={{ color: \"red\" }}>{errors.Location}</p>\n//           )}\n//         </div>\n//         <div>\n//           <label>Salary:</label>\n//           <input\n//             className=\"form-control\"\n//             type=\"number\"\n//             name=\"Salary\"\n//             onChange={handleChange}\n//             value={values.Salary}\n//           />\n//           {errors.Salary && (\n//             <p style={{ color: \"red\" }}>{errors.Salary}</p>\n//           )}\n//         </div>\n//         <div className=\"mt-4\">\n//           <input\n//             className=\"btn btn-primary form-control btn-lg\"\n//             type=\"submit\"\n//             value={modalType === \"create\" ? \"Register\" : \"Save Update\"}\n//           />\n//         </div>\n//       </form>\n//       {message && (\n//         <p style={{ color: err ? \"red\" : \"green\" }}>{message}</p>\n//       )}\n//     </Modal.Body>\n//     <Modal.Footer>\n//       <Button\n//         className=\"btn btn-danger btn-lg\"\n//         variant=\"secondary\"\n//         onClick={handleClose}\n//       >\n//         Close\n//       </Button>\n//     </Modal.Footer>\n//   </Modal>\n//   )\n// }\n\n// export default JobModal","map":{"version":3,"names":["React","useState","Modal","Button","API_BASE_URL","process","env","REACT_APP_API_URL"],"sources":["G:/MYL software company/Full-FrontEnd_and BackEnd-Project/Job-Portal-Project/Client/src/components/Pages/JobPage/JobComponent/JobModal.js"],"sourcesContent":["import React,{useState} from 'react'\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:2000/\";\r\n\r\n// const JobModal = ({modalType,showModal,handleClose,values}) => {\r\n//     // const [showModal, setShow] = useState(false);\r\n//     // const [modalType, setModalType] = useState(\"create\");\r\n//     // const [selectedJob, setSelectedJob] = useState({});\r\n//     // const [jobsData, SetJobs] = useState([]);\r\n//     const [values, setValues] = useState({\r\n//       Company: \"\",\r\n//       Description: \"\",\r\n//       Jtitle: \"\",\r\n//       Location: \"\",\r\n//       Salary: \"\",\r\n//     });\r\n//     const [errors, setErrors] = useState({});\r\n//     const [message, setMessage] = useState(\"\");\r\n//     const [err, setError] = useState(false);\r\n  \r\n//       const handleChange = (e) => {\r\n//         setValues({ ...values, [e.target.name]: e.target.value });\r\n//       };\r\n//       const validate = () => {\r\n//         let errors = {};\r\n//         if (!values.Company.trim()) errors.Company = \"Company name is required.\";\r\n//         if (!values.Description.trim())\r\n//           errors.Description = \"Description is required.\";\r\n//         if (!values.Jtitle.trim()) errors.Jtitle = \"Job title is required.\";\r\n//         if (!values.Location.trim()) errors.Location = \"Location is required.\";\r\n//         if (!values.Salary || isNaN(values.Salary) || values.Salary <= 0)\r\n//           errors.Salary = \"Salary must be a positive number.\";\r\n//         return errors;\r\n//       };\r\n//       const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n//         const validationErrors = validate();\r\n//         setErrors(validationErrors);\r\n    \r\n//         if (Object.keys(validationErrors).length === 0) {\r\n//           try {\r\n//             const url = modalType === \"create\" ? `${API_BASE_URL}ManageJobs/PostJob` : `${API_BASE_URL}ManageJobs/UpdateJob/${selectedJob.JOB_ID}`;\r\n    \r\n//             const method = modalType === \"create\" ? \"POST\" : \"PUT\"; // Assuming you have a PUT endpoint for updates\r\n//             const response = await fetch(url, {\r\n//               method: method,\r\n//               headers: { \"Content-Type\": \"application/json\" },\r\n//               body: JSON.stringify(values),\r\n//             });\r\n    \r\n//             const data = await response.json();\r\n//             if (response.ok) {\r\n//               setMessage(\r\n//                 modalType === \"create\"\r\n//                   ? \"Job posted successfully!\"\r\n//                   : \"Job updated successfully!\"             \r\n//               );\r\n              \r\n//               setError(false);\r\n//               // Refresh the job list or update state\r\n//               if (modalType === \"create\") {\r\n//                 SetJobs((prevJobs) => [...prevJobs, data.job]); // Assuming your API returns the created job\r\n//               } else {\r\n//                 SetJobs((prevJobs) =>\r\n//                   prevJobs.map((job) =>\r\n//                     job.JOB_ID === selectedJob.JOB_ID ? values : job\r\n//                   )\r\n//                 );\r\n//               }\r\n//             } else {\r\n//               setMessage(data.message || \"An error occurred.\");\r\n//               setError(true);\r\n//             }\r\n//           } catch (err) {\r\n//             setMessage(\"An unexpected error occurred.\");\r\n//             setError(true);\r\n//             console.error(err);\r\n//           }\r\n//         } else {\r\n//           setMessage(\"Please fix the errors and submit again.\");\r\n//           setError(true);\r\n//         }\r\n//       };\r\n\r\n//     //   const handleClose = () => {\r\n//     //     setSelectedJob({});\r\n//     //     setValues({\r\n//     //       Company: \"\",\r\n//     //       Description: \"\",\r\n//     //       Jtitle: \"\",\r\n//     //       Location: \"\",\r\n//     //       Salary: \"\",\r\n//     //     });\r\n//     //     setShow(false);\r\n//     //   };\r\n    \r\n//     //   const ShowPostModal = () => {\r\n//     //     setShow(true);\r\n//     //     setModalType(\"create\");\r\n//     //     setValues({\r\n//     //       Company: \"\",\r\n//     //       Description: \"\",\r\n//     //       Jtitle: \"\",\r\n//     //       Location: \"\",\r\n//     //       Salary: \"\",\r\n//     //     });\r\n//     //   };\r\n    \r\n//     //   const ShowUpdateModal = (item) => {\r\n//     //     setShow(true);\r\n//     //     setModalType(\"update\");\r\n//     //     setSelectedJob(item);\r\n//     //     setValues({\r\n//     //       Company: item.COMPANY,\r\n//     //       Description: item.DESCRIPTION,\r\n//     //       Jtitle: item.JOB_TITLE,\r\n//     //       Location: item.LOCATION,\r\n//     //       Salary: item.SALARY,\r\n//     //     });\r\n//     //   };\r\n    \r\n//   return (\r\n//     <Modal className=\"modal-top\" show={showModal} onHide={handleClose}>\r\n//     <Modal.Header closeButton>\r\n//       <Modal.Title>\r\n//       {modalType === \"create\" ? \"Post a Job\" : \"Update Job\"}\r\n//       </Modal.Title>\r\n//     </Modal.Header>\r\n//     <Modal.Body>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div>\r\n//           <label>\r\n//             Company\r\n//             <span\r\n//               style={{\r\n//                 color: \"red\",\r\n//                 fontSize: \"30px\",\r\n//                 marginLeft: \"1px\",\r\n//               }}\r\n//             >\r\n//               *\r\n//             </span>\r\n//             :\r\n//           </label>\r\n//           <input\r\n//             className=\"form-control\"\r\n//             type=\"text\"\r\n//             name=\"Company\"\r\n//             value={values.Company}\r\n//             onChange={handleChange}\r\n//           />\r\n//           {errors.Company && (\r\n//             <p style={{ color: \"red\" }}>{errors.Company}</p>\r\n//           )}\r\n//         </div>\r\n//         <div>\r\n//           <label>Description:</label>\r\n//           <input\r\n//             className=\"form-control\"\r\n//             type=\"text\"\r\n//             name=\"Description\"\r\n//             onChange={handleChange}\r\n//             value={values.Description}\r\n//           />\r\n//           {errors.Description && (\r\n//             <p style={{ color: \"red\" }}>{errors.Description}</p>\r\n//           )}\r\n//         </div>\r\n//         <div>\r\n//           <label>Job Title:</label>\r\n//           <input\r\n//             className=\"form-control\"\r\n//             type=\"text\"\r\n//             name=\"Jtitle\"\r\n//             onChange={handleChange}\r\n//             value={values.Jtitle}\r\n//           />\r\n//           {errors.Jtitle && (\r\n//             <p style={{ color: \"red\" }}>{errors.Jtitle}</p>\r\n//           )}\r\n//         </div>\r\n//         <div>\r\n//           <label>Location:</label>\r\n//           <input\r\n//             className=\"form-control\"\r\n//             type=\"text\"\r\n//             name=\"Location\"\r\n//             onChange={handleChange}\r\n//             value={values.Location}\r\n//           />\r\n//           {errors.Location && (\r\n//             <p style={{ color: \"red\" }}>{errors.Location}</p>\r\n//           )}\r\n//         </div>\r\n//         <div>\r\n//           <label>Salary:</label>\r\n//           <input\r\n//             className=\"form-control\"\r\n//             type=\"number\"\r\n//             name=\"Salary\"\r\n//             onChange={handleChange}\r\n//             value={values.Salary}\r\n//           />\r\n//           {errors.Salary && (\r\n//             <p style={{ color: \"red\" }}>{errors.Salary}</p>\r\n//           )}\r\n//         </div>\r\n//         <div className=\"mt-4\">\r\n//           <input\r\n//             className=\"btn btn-primary form-control btn-lg\"\r\n//             type=\"submit\"\r\n//             value={modalType === \"create\" ? \"Register\" : \"Save Update\"}\r\n//           />\r\n//         </div>\r\n//       </form>\r\n//       {message && (\r\n//         <p style={{ color: err ? \"red\" : \"green\" }}>{message}</p>\r\n//       )}\r\n//     </Modal.Body>\r\n//     <Modal.Footer>\r\n//       <Button\r\n//         className=\"btn btn-danger btn-lg\"\r\n//         variant=\"secondary\"\r\n//         onClick={handleClose}\r\n//       >\r\n//         Close\r\n//       </Button>\r\n//     </Modal.Footer>\r\n//   </Modal>\r\n//   )\r\n// }\r\n\r\n// export default JobModal\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AACpC,SAASC,KAAK,EAAEC,MAAM,QAAQ,iBAAiB;AAC/C,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,wBAAwignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}