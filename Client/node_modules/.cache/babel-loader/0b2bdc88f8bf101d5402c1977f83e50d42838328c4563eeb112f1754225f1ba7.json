{"ast":null,"code":"useEffect(() => {\n  if (!showModal || modalType === \"create\") {\n    setFormSlectedJob({\n      Company: \"\",\n      Description: \"\",\n      Jtitle: \"\",\n      Location: \"\",\n      Salary: \"\"\n    });\n    setErrors({});\n    setMessage(\"\");\n    setError(false);\n  }\n}, [showModal, modalType]);\nconst handleSubmit = async e => {\n  e.preventDefault();\n  const validationErrors = validate();\n  setErrors(validationErrors);\n  if (Object.keys(validationErrors).length === 0) {\n    try {\n      const url = modalType === \"create\" ? `${API_BASE_URL}ManageJobs/PostJob` : `${API_BASE_URL}ManageJobs/UpdateJob/${id}`;\n      const method = modalType === \"create\" ? \"POST\" : \"PUT\";\n      const response = await fetch(url, {\n        method: method,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formSlectedJob)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessage(modalType === \"create\" ? \"Job posted successfully!\" : \"Job updated successfully!\");\n        setError(false);\n        setFormSlectedJob({\n          Company: \"\",\n          Description: \"\",\n          Jtitle: \"\",\n          Location: \"\",\n          Salary: \"\"\n        });\n      } else {\n        setMessage(data.message || \"An error occurred.\");\n        setError(true);\n        console.error(\"Error response:\", data); // Added for debugging\n      }\n    } catch (err) {\n      setMessage(\"An unexpected error occurred.\");\n      setError(true);\n      console.error(err);\n    }\n  } else {\n    setMessage(\"Please fix the errors and submit again.\");\n    setError(true);\n  }\n};","map":{"version":3,"names":["useEffect","showModal","modalType","setFormSlectedJob","Company","Description","Jtitle","Location","Salary","setErrors","setMessage","setError","handleSubmit","e","preventDefault","validationErrors","validate","Object","keys","length","url","API_BASE_URL","id","method","response","fetch","headers","body","JSON","stringify","formSlectedJob","data","json","ok","message","console","error","err"],"sources":["G:/MYL software company/Full-FrontEnd_and BackEnd-Project/Job-Portal-Project/Client/src/components/Pages/JobPage/JobComponent/JobModal.js"],"sourcesContent":["useEffect(() => {\r\n  if (!showModal || modalType === \"create\") {\r\n    setFormSlectedJob({\r\n      Company: \"\",\r\n      Description: \"\",\r\n      Jtitle: \"\",\r\n      Location: \"\",\r\n      Salary: \"\",\r\n    });\r\n    setErrors({});\r\n    setMessage(\"\");\r\n    setError(false);\r\n  }\r\n}, [showModal, modalType]);\r\n\r\nconst handleSubmit = async (e) => {\r\n  e.preventDefault();\r\n  const validationErrors = validate();\r\n  setErrors(validationErrors);\r\n\r\n  if (Object.keys(validationErrors).length === 0) {\r\n    try {\r\n      const url = modalType === \"create\" \r\n        ? `${API_BASE_URL}ManageJobs/PostJob` \r\n        : `${API_BASE_URL}ManageJobs/UpdateJob/${id}`;\r\n      \r\n      const method = modalType === \"create\" ? \"POST\" : \"PUT\";\r\n      const response = await fetch(url, {\r\n        method: method,\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(formSlectedJob),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setMessage(modalType === \"create\" ? \"Job posted successfully!\" : \"Job updated successfully!\");\r\n        setError(false);\r\n        setFormSlectedJob({\r\n          Company: \"\",\r\n          Description: \"\",\r\n          Jtitle: \"\",\r\n          Location: \"\",\r\n          Salary: \"\",\r\n        });\r\n      } else {\r\n        setMessage(data.message || \"An error occurred.\");\r\n        setError(true);\r\n        console.error(\"Error response:\", data); // Added for debugging\r\n      }\r\n    } catch (err) {\r\n      setMessage(\"An unexpected error occurred.\");\r\n      setError(true);\r\n      console.error(err);\r\n    }\r\n  } else {\r\n    setMessage(\"Please fix the errors and submit again.\");\r\n    setError(true);\r\n  }\r\n};\r\n"],"mappings":"AAAAA,SAAS,CAAC,MAAM;EACd,IAAI,CAACC,SAAS,IAAIC,SAAS,KAAK,QAAQ,EAAE;IACxCC,iBAAiB,CAAC;MAChBC,OAAO,EAAE,EAAE;MACXC,WAAW,EAAE,EAAE;MACfC,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE;IACV,CAAC,CAAC;IACFC,SAAS,CAAC,CAAC,CAAC,CAAC;IACbC,UAAU,CAAC,EAAE,CAAC;IACdC,QAAQ,CAAC,KAAK,CAAC;EACjB;AACF,CAAC,EAAE,CAACV,SAAS,EAAEC,SAAS,CAAC,CAAC;AAE1B,MAAMU,YAAY,GAAG,MAAOC,CAAC,IAAK;EAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;EAClB,MAAMC,gBAAgB,GAAGC,QAAQ,CAAC,CAAC;EACnCP,SAAS,CAACM,gBAAgB,CAAC;EAE3B,IAAIE,MAAM,CAACC,IAAI,CAACH,gBAAgB,CAAC,CAACI,MAAM,KAAK,CAAC,EAAE;IAC9C,IAAI;MACF,MAAMC,GAAG,GAAGlB,SAAS,KAAK,QAAQ,GAC9B,GAAGmB,YAAY,oBAAoB,GACnC,GAAGA,YAAY,wBAAwBC,EAAE,EAAE;MAE/C,MAAMC,MAAM,GAAGrB,SAAS,KAAK,QAAQ,GAAG,MAAM,GAAG,KAAK;MACtD,MAAMsB,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAE;QAChCG,MAAM,EAAEA,MAAM;QACdG,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACC,cAAc;MACrC,CAAC,CAAC;MAEF,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,IAAIR,QAAQ,CAACS,EAAE,EAAE;QACfvB,UAAU,CAACR,SAAS,KAAK,QAAQ,GAAG,0BAA0B,GAAG,2BAA2B,CAAC;QAC7FS,QAAQ,CAAC,KAAK,CAAC;QACfR,iBAAiB,CAAC;UAChBC,OAAO,EAAE,EAAE;UACXC,WAAW,EAAE,EAAE;UACfC,MAAM,EAAE,EAAE;UACVC,QAAQ,EAAE,EAAE;UACZC,MAAM,EAAE;QACV,CAAC,CAAC;MACJ,CAAC,MAAM;QACLE,UAAU,CAACqB,IAAI,CAACG,OAAO,IAAI,oBAAoB,CAAC;QAChDvB,QAAQ,CAAC,IAAI,CAAC;QACdwB,OAAO,CAACC,KAAK,CAAC,iBAAiB,EAAEL,IAAI,CAAC,CAAC,CAAC;MAC1C;IACF,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZ3B,UAAU,CAAC,+BAA+B,CAAC;MAC3CC,QAAQ,CAAC,IAAI,CAAC;MACdwB,OAAO,CAACC,KAAK,CAACC,GAAG,CAAC;IACpB;EACF,CAAC,MAAM;IACL3B,UAAU,CAAC,yCAAyC,CAAC;IACrDC,QAAQ,CAAC,IAAI,CAAC;EAChB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}