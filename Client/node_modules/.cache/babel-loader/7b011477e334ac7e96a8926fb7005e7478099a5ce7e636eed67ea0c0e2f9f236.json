{"ast":null,"code":"var _jsxFileName = \"G:\\\\MYL software company\\\\Full-FrontEnd_and BackEnd-Project\\\\Job-Portal-Project\\\\Client\\\\src\\\\components\\\\Pages\\\\JobPage\\\\ManageJob.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport ConfirmDeleteModal from \"./ConfirmDeleteModal\";\n// import SelfCloseModalAlert from \"./SelfCloseModalAlert\";\nimport SelfClosingAlert from \"./SelfClosingAlert\";\nimport { Pagination } from \"react-bootstrap\";\nimport JobModal from \"./JobComponent/JobModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:2000/\";\nfunction ManageJob() {\n  _s();\n  const [showModal, setShow] = useState(false);\n  const [modalType, setModalType] = useState(\"create\");\n  const [selectedJob, setSelectedJob] = useState({});\n  const [jobsData, SetJobs] = useState([]);\n  // const [values, setValues] = useState({\n  //   Company: \"\",\n  //   Description: \"\",\n  //   Jtitle: \"\",\n  //   Location: \"\",\n  //   Salary: \"\",\n  // });\n  // const [errors, setErrors] = useState({});\n  // const [message, setMessage] = useState(\"\");\n  // const [err, setError] = useState(false);\n\n  useEffect(() => {\n    const api = \"http://localhost:2000/\";\n    fetch(api).then(response => response.json()).then(data => {\n      const jobsData = data.Jobs || [];\n      SetJobs(jobsData);\n    }).catch(e => {\n      console.error(e.message);\n    });\n  }, [jobsData]);\n  // pagination\n  var rowsPerPage = 2;\n  const [currentPage, setCurrentPage] = useState(1);\n  const totalPages = Math.ceil(jobsData.length / rowsPerPage);\n\n  // Calculate the data for the current page\n  const startIndex = (currentPage - 1) * rowsPerPage;\n  const currentData = jobsData.slice(startIndex, startIndex + rowsPerPage);\n\n  // Function to change the page\n  const changePage = newPage => {\n    if (newPage > 0 && newPage <= totalPages) {\n      setCurrentPage(newPage);\n    }\n  };\n  const renderPaginationItems = () => {\n    const items = [];\n    const maxVisiblePages = 2; // Number of pages to show near the current page\n\n    for (let page = 1; page <= totalPages; page++) {\n      if (page === 1 ||\n      // First page\n      page === totalPages ||\n      // Last page\n      page >= currentPage - maxVisiblePages && page <= currentPage + maxVisiblePages // Pages near the current page\n      ) {\n        items.push(/*#__PURE__*/_jsxDEV(Pagination.Item, {\n          active: page === currentPage,\n          onClick: () => changePage(page),\n          children: page\n        }, page, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this));\n      } else if (page === currentPage - maxVisiblePages - 1 ||\n      // Before the range of current page\n      page === currentPage + maxVisiblePages + 1 // After the range of current page\n      ) {\n        items.push(/*#__PURE__*/_jsxDEV(Pagination.Ellipsis, {\n          disabled: true\n        }, page, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 24\n        }, this));\n      }\n    }\n    return items;\n  };\n  //end of pagination\n  const handleClose = () => {\n    setSelectedJob({});\n    setValues({\n      Company: \"\",\n      Description: \"\",\n      Jtitle: \"\",\n      Location: \"\",\n      Salary: \"\"\n    });\n    setShow(false);\n  };\n  const ShowPostModal = () => {\n    setShow(true);\n    setModalType(\"create\");\n    setValues({\n      Company: \"\",\n      Description: \"\",\n      Jtitle: \"\",\n      Location: \"\",\n      Salary: \"\"\n    });\n  };\n  const ShowUpdateModal = item => {\n    setShow(true);\n    setModalType(\"update\");\n    setSelectedJob(item);\n    setValues({\n      Company: item.COMPANY,\n      Description: item.DESCRIPTION,\n      Jtitle: item.JOB_TITLE,\n      Location: item.LOCATION,\n      Salary: item.SALARY\n    });\n  };\n\n  // const handleChange = (e) => {\n  //   setValues({ ...values, [e.target.name]: e.target.value });\n  // };\n\n  const validate = () => {\n    let errors = {};\n    if (!values.Company.trim()) errors.Company = \"Company name is required.\";\n    if (!values.Description.trim()) errors.Description = \"Description is required.\";\n    if (!values.Jtitle.trim()) errors.Jtitle = \"Job title is required.\";\n    if (!values.Location.trim()) errors.Location = \"Location is required.\";\n    if (!values.Salary || isNaN(values.Salary) || values.Salary <= 0) errors.Salary = \"Salary must be a positive number.\";\n    return errors;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const validationErrors = validate();\n    setErrors(validationErrors);\n    if (Object.keys(validationErrors).length === 0) {\n      try {\n        const url = modalType === \"create\" ? `${API_BASE_URL}ManageJobs/PostJob` : `${API_BASE_URL}ManageJobs/UpdateJob/${selectedJob.JOB_ID}`;\n        const method = modalType === \"create\" ? \"POST\" : \"PUT\"; // Assuming you have a PUT endpoint for updates\n        const response = await fetch(url, {\n          method: method,\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(values)\n        });\n        const data = await response.json();\n        if (response.ok) {\n          setMessage(modalType === \"create\" ? \"Job posted successfully!\" : \"Job updated successfully!\");\n          setError(false);\n          // Refresh the job list or update state\n          if (modalType === \"create\") {\n            SetJobs(prevJobs => [...prevJobs, data.job]); // Assuming your API returns the created job\n          } else {\n            SetJobs(prevJobs => prevJobs.map(job => job.JOB_ID === selectedJob.JOB_ID ? values : job));\n          }\n        } else {\n          setMessage(data.message || \"An error occurred.\");\n          setError(true);\n        }\n      } catch (err) {\n        setMessage(\"An unexpected error occurred.\");\n        setError(true);\n        console.error(err);\n      }\n    } else {\n      setMessage(\"Please fix the errors and submit again.\");\n      setError(true);\n    }\n  };\n\n  //for delete modal\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [jobIdToDelete, setJobIdToDelete] = useState(null);\n  const [DeletMessage, setDeletMessage] = useState(null);\n  const handlDeleteClick = jobid => {\n    setIsModalOpen(true); // // Open the confirmation modal\n    setJobIdToDelete(jobid);\n    //const isConfirmed = confirm(\"Are you sure you want to delete this job?\");\n  };\n  const handleCancelDelete = () => {\n    setIsModalOpen(false); // Close the modal without deleting\n  };\n\n  //self closing modal logic\n  const [SelfModalOpen, setSelfModalOpen] = useState(false);\n  // const [SelfModalClose, setSelfModalClose] = useState(false);\n\n  const handleSelfClose = () => setSelfModalOpen(false);\n  //\n  const handleConfirmDelete = async () => {\n    setIsModalOpen(false);\n    try {\n      const response = await fetch(`http://localhost:2000/ManageJobs/DeleteJob/${jobIdToDelete}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setDeletMessage(\"Job deleted successfully:\", data);\n        setSelfModalOpen(true);\n      } else {\n        setDeletMessage(\"Failed to delete the job:\", response.statusText);\n      }\n    } catch (error) {\n      setDeletMessage(\"Error during deletion:\", error);\n    }\n  };\n\n  // // Usage example\n  // deleteJob(1); // Pass the job ID you want to delete\n\n  if (jobsData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid pt-5 \",\n      style: {\n        marginTop: \"100px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-container bg-light clearfix container\",\n        children: [/*#__PURE__*/_jsxDEV(SelfClosingAlert, {\n          show: SelfModalOpen,\n          onClose: handleSelfClose,\n          message: DeletMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            float: \"right\"\n          },\n          className: \"btn btn-success\",\n          onClick: ShowPostModal,\n          children: \"Add new Job\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(JobModal, {\n          modalType: modalType,\n          showModal: showModal,\n          values: values,\n          handleClose: handleClose,\n          SlectedJob: values,\n          id: selectedJob.JOB_ID\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container shadow bg-light container \",\n        children: [/*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-striped table-hover\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            style: {\n              backgroundColor: \"lightgray\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"No\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Job ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Job Title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Company\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Location\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Salary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 384,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                scope: \"col\",\n                children: \"Action\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            className: \"table-group-divider\",\n            children: currentData && currentData.length > 0 ? currentData.map((item, index) => item ? /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: (currentPage - 1) * rowsPerPage + index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.JOB_ID\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.JOB_TITLE\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.COMPANY\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.LOCATION\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.SALARY\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: item.DESCRIPTION\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  display: \"Flex\",\n                  columnGap: \"10px\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(Link, {\n                  className: \"btn btn-success\",\n                  children: \"View\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 401,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => ShowUpdateModal(item),\n                  className: \"btn btn-warning\",\n                  children: \"Update\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 402,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Link, {\n                  onClick: () => handlDeleteClick(item.JOB_ID),\n                  className: \"btn btn-danger\",\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 408,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 23\n              }, this)]\n            }, item.JOB_ID, true, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 21\n            }, this) : null) : /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"8\",\n                className: \"text-center\",\n                children: \"No jobs available.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 420,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n          className: \"justify-content-center\",\n          size: \"lg\",\n          children: [/*#__PURE__*/_jsxDEV(Pagination.First, {\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Pagination.Prev, {\n            onClick: () => changePage(currentPage - 1),\n            disabled: currentPage === 1,\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 13\n          }, this), renderPaginationItems(), /*#__PURE__*/_jsxDEV(Pagination.Next, {\n            onClick: () => changePage(currentPage + 1),\n            disabled: currentPage === totalPages,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Pagination.Last, {\n            disabled: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ConfirmDeleteModal, {\n          isOpen: isModalOpen,\n          onConfirm: handleConfirmDelete,\n          onCancel: handleCancelDelete,\n          message: DeletMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container-fluid bg-light\",\n      style: {\n        marginTop: \"100px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-5 mb-4 bg-light rounded-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container-fluid py-5 text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            style: {\n              color: \"red\"\n            },\n            children: \"There is no jobs available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(ManageJob, \"p2J/w6AEHHyqvX2tHz3VXKHChrc=\");\n_c = ManageJob;\nexport default ManageJob;\nvar _c;\n$RefreshReg$(_c, \"ManageJob\");","map":{"version":3,"names":["React","useState","useEffect","Link","Modal","Button","ConfirmDeleteModal","SelfClosingAlert","Pagination","JobModal","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","ManageJob","_s","showModal","setShow","modalType","setModalType","selectedJob","setSelectedJob","jobsData","SetJobs","api","fetch","then","response","json","data","Jobs","catch","e","console","error","message","rowsPerPage","currentPage","setCurrentPage","totalPages","Math","ceil","length","startIndex","currentData","slice","changePage","newPage","renderPaginationItems","items","maxVisiblePages","page","push","Item","active","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","Ellipsis","disabled","handleClose","setValues","Company","Description","Jtitle","Location","Salary","ShowPostModal","ShowUpdateModal","item","COMPANY","DESCRIPTION","JOB_TITLE","LOCATION","SALARY","validate","errors","values","trim","isNaN","handleSubmit","preventDefault","validationErrors","setErrors","Object","keys","url","JOB_ID","method","headers","body","JSON","stringify","ok","setMessage","setError","prevJobs","job","map","err","isModalOpen","setIsModalOpen","jobIdToDelete","setJobIdToDelete","DeletMessage","setDeletMessage","handlDeleteClick","jobid","handleCancelDelete","SelfModalOpen","setSelfModalOpen","handleSelfClose","handleConfirmDelete","statusText","className","style","marginTop","show","onClose","float","SlectedJob","id","backgroundColor","scope","index","display","columnGap","colSpan","size","First","Prev","Next","Last","isOpen","onConfirm","onCancel","color","_c","$RefreshReg$"],"sources":["G:/MYL software company/Full-FrontEnd_and BackEnd-Project/Job-Portal-Project/Client/src/components/Pages/JobPage/ManageJob.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport ConfirmDeleteModal from \"./ConfirmDeleteModal\";\r\n// import SelfCloseModalAlert from \"./SelfCloseModalAlert\";\r\nimport SelfClosingAlert from \"./SelfClosingAlert\";\r\nimport { Pagination } from \"react-bootstrap\";\r\nimport JobModal from \"./JobComponent/JobModal\";\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:2000/\";\r\n\r\nfunction ManageJob() {\r\n  const [showModal, setShow] = useState(false);\r\n  const [modalType, setModalType] = useState(\"create\");\r\n  const [selectedJob, setSelectedJob] = useState({});\r\n  const [jobsData, SetJobs] = useState([]);\r\n  // const [values, setValues] = useState({\r\n  //   Company: \"\",\r\n  //   Description: \"\",\r\n  //   Jtitle: \"\",\r\n  //   Location: \"\",\r\n  //   Salary: \"\",\r\n  // });\r\n  // const [errors, setErrors] = useState({});\r\n  // const [message, setMessage] = useState(\"\");\r\n  // const [err, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const api = \"http://localhost:2000/\";\r\n    fetch(api)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const jobsData = data.Jobs || [];\r\n        SetJobs(jobsData);\r\n      })\r\n      .catch((e) => {\r\n        console.error(e.message);\r\n      });\r\n  }, [jobsData]);\r\n  // pagination\r\n  var rowsPerPage = 2;\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const totalPages = Math.ceil(jobsData.length / rowsPerPage);\r\n\r\n  // Calculate the data for the current page\r\n  const startIndex = (currentPage - 1) * rowsPerPage;\r\n  const currentData = jobsData.slice(startIndex, startIndex + rowsPerPage);\r\n\r\n  // Function to change the page\r\n  const changePage = (newPage) => {\r\n    if (newPage > 0 && newPage <= totalPages) {\r\n      setCurrentPage(newPage);\r\n    }\r\n  };\r\n  const renderPaginationItems = () => {\r\n    const items = [];\r\n    const maxVisiblePages = 2; // Number of pages to show near the current page\r\n\r\n    for (let page = 1; page <= totalPages; page++) {\r\n        if (\r\n            page === 1 || // First page\r\n            page === totalPages || // Last page\r\n            (page >= currentPage - maxVisiblePages && page <= currentPage + maxVisiblePages) // Pages near the current page\r\n        ) {\r\n            items.push(\r\n                <Pagination.Item\r\n                  \r\n                    key={page}\r\n                    active={page === currentPage}\r\n                    onClick={() => changePage(page)}\r\n                >\r\n                    {page}\r\n                </Pagination.Item>\r\n            );\r\n        } else if (\r\n            page === currentPage - maxVisiblePages - 1 || // Before the range of current page\r\n            page === currentPage + maxVisiblePages + 1 // After the range of current page\r\n        ) {\r\n            items.push(<Pagination.Ellipsis key={page} disabled />);\r\n        }\r\n    }\r\n\r\n    return items;\r\n};\r\n  //end of pagination\r\n  const handleClose = () => {\r\n    setSelectedJob({});\r\n    setValues({\r\n      Company: \"\",\r\n      Description: \"\",\r\n      Jtitle: \"\",\r\n      Location: \"\",\r\n      Salary: \"\",\r\n    });\r\n    setShow(false);\r\n  };\r\n\r\n  const ShowPostModal = () => {\r\n    setShow(true);\r\n    setModalType(\"create\");\r\n    setValues({\r\n      Company: \"\",\r\n      Description: \"\",\r\n      Jtitle: \"\",\r\n      Location: \"\",\r\n      Salary: \"\",\r\n    });\r\n  };\r\n\r\n  const ShowUpdateModal = (item) => {\r\n    setShow(true);\r\n    setModalType(\"update\");\r\n    setSelectedJob(item);\r\n    setValues({\r\n      Company: item.COMPANY,\r\n      Description: item.DESCRIPTION,\r\n      Jtitle: item.JOB_TITLE,\r\n      Location: item.LOCATION,\r\n      Salary: item.SALARY,\r\n    });\r\n  };\r\n\r\n  // const handleChange = (e) => {\r\n  //   setValues({ ...values, [e.target.name]: e.target.value });\r\n  // };\r\n\r\n  const validate = () => {\r\n    let errors = {};\r\n    if (!values.Company.trim()) errors.Company = \"Company name is required.\";\r\n    if (!values.Description.trim())\r\n      errors.Description = \"Description is required.\";\r\n    if (!values.Jtitle.trim()) errors.Jtitle = \"Job title is required.\";\r\n    if (!values.Location.trim()) errors.Location = \"Location is required.\";\r\n    if (!values.Salary || isNaN(values.Salary) || values.Salary <= 0)\r\n      errors.Salary = \"Salary must be a positive number.\";\r\n    return errors;\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const validationErrors = validate();\r\n    setErrors(validationErrors);\r\n\r\n    if (Object.keys(validationErrors).length === 0) {\r\n      try {\r\n        const url = modalType === \"create\" ? `${API_BASE_URL}ManageJobs/PostJob` : `${API_BASE_URL}ManageJobs/UpdateJob/${selectedJob.JOB_ID}`;\r\n\r\n        const method = modalType === \"create\" ? \"POST\" : \"PUT\"; // Assuming you have a PUT endpoint for updates\r\n        const response = await fetch(url, {\r\n          method: method,\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(values),\r\n        });\r\n\r\n        const data = await response.json();\r\n        if (response.ok) {\r\n          setMessage(\r\n            modalType === \"create\"\r\n              ? \"Job posted successfully!\"\r\n              : \"Job updated successfully!\"             \r\n          );\r\n          \r\n          setError(false);\r\n          // Refresh the job list or update state\r\n          if (modalType === \"create\") {\r\n            SetJobs((prevJobs) => [...prevJobs, data.job]); // Assuming your API returns the created job\r\n          } else {\r\n            SetJobs((prevJobs) =>\r\n              prevJobs.map((job) =>\r\n                job.JOB_ID === selectedJob.JOB_ID ? values : job\r\n              )\r\n            );\r\n          }\r\n        } else {\r\n          setMessage(data.message || \"An error occurred.\");\r\n          setError(true);\r\n        }\r\n      } catch (err) {\r\n        setMessage(\"An unexpected error occurred.\");\r\n        setError(true);\r\n        console.error(err);\r\n      }\r\n    } else {\r\n      setMessage(\"Please fix the errors and submit again.\");\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  //for delete modal\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [jobIdToDelete, setJobIdToDelete] = useState(null);\r\n  const [DeletMessage, setDeletMessage] = useState(null);\r\n\r\n  const handlDeleteClick = (jobid) => {\r\n    setIsModalOpen(true); // // Open the confirmation modal\r\n    setJobIdToDelete(jobid);\r\n    //const isConfirmed = confirm(\"Are you sure you want to delete this job?\");\r\n  };\r\n  const handleCancelDelete = () => {\r\n    setIsModalOpen(false); // Close the modal without deleting\r\n  };\r\n\r\n  //self closing modal logic\r\n  const [SelfModalOpen, setSelfModalOpen] = useState(false);\r\n  // const [SelfModalClose, setSelfModalClose] = useState(false);\r\n\r\n  const handleSelfClose = () => setSelfModalOpen(false);\r\n  //\r\n  const handleConfirmDelete = async () => {\r\n    setIsModalOpen(false);\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:2000/ManageJobs/DeleteJob/${jobIdToDelete}`,\r\n        {\r\n          method: \"DELETE\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setDeletMessage(\"Job deleted successfully:\", data);\r\n        setSelfModalOpen(true);\r\n      } else {\r\n        setDeletMessage(\"Failed to delete the job:\", response.statusText);\r\n      }\r\n    } catch (error) {\r\n      setDeletMessage(\"Error during deletion:\", error);\r\n    }\r\n  };\r\n\r\n  // // Usage example\r\n  // deleteJob(1); // Pass the job ID you want to delete\r\n\r\n  if (jobsData) {\r\n    return (\r\n      <div className=\"container-fluid pt-5 \" style={{ marginTop: \"100px\" }}>\r\n        <div className=\"modal-container bg-light clearfix container\">\r\n          <SelfClosingAlert\r\n            show={SelfModalOpen}\r\n            onClose={handleSelfClose}\r\n            message={DeletMessage}\r\n          />\r\n          <Button\r\n            style={{ float: \"right\" }}\r\n            className=\"btn btn-success\"\r\n            onClick={ShowPostModal}\r\n          >\r\n            Add new Job\r\n          </Button>\r\n        <JobModal\r\n      \r\n          modalType= {modalType}\r\n          showModal={showModal}\r\n          values={values}\r\n          handleClose={handleClose}\r\n          SlectedJob={values}\r\n          id={selectedJob.JOB_ID}\r\n         \r\n        />\r\n\r\n          {/* <Modal className=\"modal-top\" show={showModal} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>\r\n                {modalType === \"create\" ? \"Post a Job\" : \"Update Job\"}\r\n                {selectedJob.JOB_ID}\r\n              </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <form onSubmit={handleSubmit}>\r\n                <div>\r\n                  <label>\r\n                    Company\r\n                    <span\r\n                      style={{\r\n                        color: \"red\",\r\n                        fontSize: \"30px\",\r\n                        marginLeft: \"1px\",\r\n                      }}\r\n                    >\r\n                      *\r\n                    </span>\r\n                    :\r\n                  </label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    name=\"Company\"\r\n                    value={values.Company}\r\n                    onChange={handleChange}\r\n                  />\r\n                  {errors.Company && (\r\n                    <p style={{ color: \"red\" }}>{errors.Company}</p>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  <label>Description:</label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    name=\"Description\"\r\n                    onChange={handleChange}\r\n                    value={values.Description}\r\n                  />\r\n                  {errors.Description && (\r\n                    <p style={{ color: \"red\" }}>{errors.Description}</p>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  <label>Job Title:</label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    name=\"Jtitle\"\r\n                    onChange={handleChange}\r\n                    value={values.Jtitle}\r\n                  />\r\n                  {errors.Jtitle && (\r\n                    <p style={{ color: \"red\" }}>{errors.Jtitle}</p>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  <label>Location:</label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    name=\"Location\"\r\n                    onChange={handleChange}\r\n                    value={values.Location}\r\n                  />\r\n                  {errors.Location && (\r\n                    <p style={{ color: \"red\" }}>{errors.Location}</p>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  <label>Salary:</label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"number\"\r\n                    name=\"Salary\"\r\n                    onChange={handleChange}\r\n                    value={values.Salary}\r\n                  />\r\n                  {errors.Salary && (\r\n                    <p style={{ color: \"red\" }}>{errors.Salary}</p>\r\n                  )}\r\n                </div>\r\n                <div className=\"mt-4\">\r\n                  <input\r\n                    className=\"btn btn-primary form-control btn-lg\"\r\n                    type=\"submit\"\r\n                    value={modalType === \"create\" ? \"Register\" : \"Save Update\"}\r\n                  />\r\n                </div>\r\n              </form>\r\n              {message && (\r\n                <p style={{ color: err ? \"red\" : \"green\" }}>{message}</p>\r\n              )}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button\r\n                className=\"btn btn-danger btn-lg\"\r\n                variant=\"secondary\"\r\n                onClick={handleClose}\r\n              >\r\n                Close\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal> */}\r\n        </div>\r\n\r\n        <div className=\"table-container shadow bg-light container \">\r\n          <table className=\"table table-striped table-hover\">\r\n            <thead style={{backgroundColor:\"lightgray\"}}>\r\n              <tr>\r\n                <th scope=\"col\">No</th>\r\n                <th scope=\"col\">Job ID</th>\r\n                <th scope=\"col\">Job Title</th>\r\n                <th scope=\"col\">Company</th>\r\n                <th scope=\"col\">Location</th>\r\n                <th scope=\"col\">Salary</th>\r\n                <th scope=\"col\">Description</th>\r\n                <th scope=\"col\">Action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"table-group-divider\">\r\n              {currentData && currentData.length > 0 ? (\r\n                currentData.map((item, index) =>\r\n                  item ? (\r\n                    <tr key={item.JOB_ID}>\r\n                      <td>{(currentPage - 1) * rowsPerPage + index + 1}</td>\r\n                      <td>{item.JOB_ID}</td>\r\n                      <td>{item.JOB_TITLE}</td>\r\n                      <td>{item.COMPANY}</td>\r\n                      <td>{item.LOCATION}</td>\r\n                      <td>{item.SALARY}</td>\r\n                      <td>{item.DESCRIPTION}</td>\r\n                      <td style={{ display: \"Flex\", columnGap: \"10px\" }}>\r\n                        <Link className=\"btn btn-success\">View</Link>\r\n                        <button\r\n                          onClick={() => ShowUpdateModal(item)}\r\n                          className=\"btn btn-warning\"\r\n                        >\r\n                          Update\r\n                        </button>\r\n                        <Link\r\n                          onClick={() => handlDeleteClick(item.JOB_ID)}\r\n                          className=\"btn btn-danger\"\r\n                        >\r\n                          Delete\r\n                        </Link>\r\n                      </td>\r\n                    </tr>\r\n                  ) : null\r\n                )\r\n              ) : (\r\n                <tr>\r\n                  <td colSpan=\"8\" className=\"text-center\">\r\n                    No jobs available.\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n\r\n          <Pagination className=\"justify-content-center\"  size=\"lg\">\r\n          <Pagination.First disabled={true} />\r\n            <Pagination.Prev\r\n                onClick={() => changePage(currentPage - 1)}\r\n                disabled={currentPage === 1}\r\n            >\r\n                Previous\r\n            </Pagination.Prev>\r\n\r\n            {renderPaginationItems()}\r\n\r\n            <Pagination.Next\r\n                onClick={() => changePage(currentPage + 1)}\r\n                disabled={currentPage === totalPages}\r\n            >\r\n                Next\r\n            </Pagination.Next>\r\n            <Pagination.Last disabled={true} />\r\n        </Pagination>\r\n          <ConfirmDeleteModal \r\n            isOpen={isModalOpen}\r\n            onConfirm={handleConfirmDelete}\r\n            onCancel={handleCancelDelete}\r\n            message={DeletMessage}\r\n          />\r\n\r\n          {/* <SelfCloseModalAlert\r\n            showModal={SelfModalOpen}\r\n            onClose={handleSelfClose}\r\n          \r\n          \r\n          /> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <section\r\n        className=\"container-fluid bg-light\"\r\n        style={{ marginTop: \"100px\" }}\r\n      >\r\n        <div className=\"p-5 mb-4 bg-light rounded-3\">\r\n          <div className=\"container-fluid py-5 text-center\">\r\n            <h1 style={{ color: \"red\" }}>There is no jobs available</h1>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ManageJob;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}